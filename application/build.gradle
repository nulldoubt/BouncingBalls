plugins {
  id("application")
}

sourceSets.main.resources.srcDirs += [rootProject.file("assets").path]
mainClassName = "me.mohammad.bouncingballs.ApplicationLauncher"
application.setMainClass(mainClassName)
eclipse.project.name = appName
java.sourceCompatibility = 8
java.targetCompatibility = 8
if (JavaVersion.current().isJava9Compatible()) {
  compileJava.options.release.set(8)
}

dependencies {
  implementation("com.badlogicgames.gdx:gdx:$gdxVersion")
  implementation("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion")
  implementation("com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop")
}

def os = System.properties["os.name"].toLowerCase()

run {
  workingDir = rootProject.file("assets").path
  setIgnoreExitValue(true)
  if (os.contains("mac"))
    jvmArgs += "-XstartOnFirstThread"
}

jar {
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude("META-INF/INDEX.LIST", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
  dependencies {
    exclude("META-INF/INDEX.LIST", "META-INF/maven/**")
  }
  manifest {
    attributes "Main-Class": project.mainClassName
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

distributions {
  main {
    contents {
      into("libs") {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

startScripts.dependsOn(":application:jar")
startScripts.classpath = project.tasks.jar.outputs.files
